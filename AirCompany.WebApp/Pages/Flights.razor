@page "/flights"
@using MudBlazor
@inject ISnackbar Snackbar
@inject ServerApi Api

<PageTitle>Flights</PageTitle>

<h1>Flight Management</h1>

<table class="table table-striped">
    <thead>
    <tr>
        <th>ID</th>
        <th>Flight Number</th>
        <th>Departure Point</th>
        <th>Arrival Point</th>
        <th>Departure Date</th>
        <th>Arrival Date</th>
        <th>Aircraft Type ID</th>
        <th>Actions</th>
    </tr>
    </thead>
    <tbody>
    @if (_flights == null || !_flights.Any())
    {
        <tr>
            <td colspan="8" class="text-center">No flights found.</td>
        </tr>
    }
    else
    {
        @foreach (var flight in _flights)
        {
            <tr>
                <td>@flight.Id</td>
                <td>@flight.Number</td>
                <td>@flight.DeparturePoint</td>
                <td>@flight.ArrivalPoint</td>
                <td>@flight.DepartureDate?.ToString("g")</td>
                <td>@flight.ArrivalDate?.ToString("g")</td>
                <td>@flight.AircraftTypeId</td>
                <td>
                    <button class="btn btn-primary" @onclick="@(() => ShowUpdForm(flight.Id))">Edit</button>
                    <button class="btn btn-danger" @onclick="@(() => DeleteFlight(flight.Id))">Delete</button>
                </td>
            </tr>
        }
    }
    </tbody>
</table>

<h3>@(flagAdd ? "Add New Flight" : "Edit Flight")</h3>

<EditForm Model="@currentFlight" OnValidSubmit=@HandleFormSubmit>
    <DataAnnotationsValidator/>
    <div class="mb-3">
        <label for="number" class="form-label">Flight Number</label>
        <InputText id="number" class="form-control" @bind-Value="currentFlight.Number"/>
    </div>
    <div class="mb-3">
        <label for="departurePoint" class="form-label">Departure Point</label>
        <InputText id="departurePoint" class="form-control" @bind-Value="currentFlight.DeparturePoint"/>
    </div>
    <div class="mb-3">
        <label for="arrivalPoint" class="form-label">Arrival Point</label>
        <InputText id="arrivalPoint" class="form-control" @bind-Value="currentFlight.ArrivalPoint"/>
    </div>
    <div class="mb-3">
        <label for="departureDate" class="form-label">Departure Date</label>
        <InputDate id="departureDate" class="form-control" @bind-Value="currentFlight.DepartureDate"/>
    </div>
    <div class="mb-3">
        <label for="arrivalDate" class="form-label">Arrival Date</label>
        <InputDate id="arrivalDate" class="form-control" @bind-Value="currentFlight.ArrivalDate"/>
    </div>
    <div class="mb-3">
        <label for="aircraftTypeId" class="form-label">Aircraft Type ID</label>
        <InputNumber id="aircraftTypeId" class="form-control" @bind-Value="currentFlight.AircraftTypeId"/>
    </div>
    <button type="submit" class="btn btn-success">Save</button>
    <button type="button" class="btn btn-secondary" @onclick="ClearForm">Cancel</button>
</EditForm>

@code {
    private List<FlightFullDto> _flights = new();
    private FlightFullDto currentFlight = new() { Number = "", DeparturePoint = "", ArrivalPoint = "", DepartureDate = null, ArrivalDate = null, AircraftTypeId = 0 };
    private bool flagAdd = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadFlights();
    }

    private async Task LoadFlights()
    {
        try
        {
            _flights = (await Api.FlightAllAsync()).ToList(); // Используем метод из ServerApi
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading flights: {ex.Message}", Severity.Error);
        }
    }

    private async Task AddNewFlight()
    {
        try
        {
            var response = await Api.FlightPOSTAsync(new FlightDto()
            {
                AircraftTypeId = currentFlight.AircraftTypeId,
                ArrivalDate = currentFlight.ArrivalDate,
                ArrivalPoint = currentFlight.ArrivalPoint,
                DepartureDate = currentFlight.DepartureDate,
                DeparturePoint = currentFlight.DeparturePoint,
                Number = currentFlight.Number
            }); // Используем метод из ServerApi
            if (response != null)
            {
                ClearForm();
                await LoadFlights();
            }
            else
            {
                Snackbar.Add("Failed to add flight.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error adding flight: {ex.Message}", Severity.Error);
        }
    }

    private async Task DeleteFlight(int flightId)
    {
        try
        {
            await Api.FlightDELETEAsync(flightId); // Используем метод из ServerApi
            await LoadFlights();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error deleting flight: {ex.Message}", Severity.Error);
        }
    }

    private async Task UpdateFlight()
    {
        try
        {
            await Api.FlightPUTAsync(currentFlight.Id, new FlightDto()
            {
                AircraftTypeId = currentFlight.AircraftTypeId,
                ArrivalDate = currentFlight.ArrivalDate,
                ArrivalPoint = currentFlight.ArrivalPoint,
                DepartureDate = currentFlight.DepartureDate,
                DeparturePoint = currentFlight.DeparturePoint,
                Number = currentFlight.Number
            });

            ClearForm();
            await LoadFlights();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error updating flight: {ex.Message}", Severity.Error);
        }
    }

    private async Task ShowUpdForm(int flightId)
    {
        flagAdd = false;
        var response = await Api.FlightGETAsync(flightId); // Используем метод из ServerApi
        if (response != null)
        {
            currentFlight = response; // Присваиваем ответ
        }
    }

    private void ClearForm()
    {
        flagAdd = true;
        currentFlight = new FlightFullDto() { Id = 0, Number = "", DeparturePoint = "", ArrivalPoint = "", DepartureDate = null, ArrivalDate = null, AircraftTypeId = 0 };
    }

    private async Task HandleFormSubmit()
    {
        if (flagAdd)
        {
            await AddNewFlight();
        }
        else
        {
            await UpdateFlight();
        }
    }

}