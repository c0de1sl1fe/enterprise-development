@page "/"
@using MudBlazor
@inject HttpClient Http
@inject ISnackbar Snackbar

<PageTitle>Aircrafts</PageTitle>

<h1>Aircraft Management</h1>

<table class="table table-striped">
    <thead>
        <tr>
            <th>ID</th>
            <th>Model</th>
            <th>Capacity</th>
            <th>Performance</th>
            <th>Max Passengers</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @if (_aircrafts == null || !_aircrafts.Any())
        {
            <tr>
                <td colspan="6" class="text-center">No aircrafts found.</td>
            </tr>
        }
        else
        {
            @foreach (var aircraft in _aircrafts)
            {
                <tr>
                    <td>@aircraft.Id</td>
                    <td>@aircraft.Model</td>
                    <td>@aircraft.Capacity</td>
                    <td>@aircraft.Performance</td>
                    <td>@aircraft.MaxPassengers</td>
                    <td>
                        <button class="btn btn-primary" @onclick="@(() => ShowUpdForm(aircraft.Id))">Edit</button>
                        <button class="btn btn-danger" @onclick="@(() => DeleteAircraft(aircraft.Id))">Delete</button>
                    </td>
                </tr>
            }
        }
    </tbody>
</table>

<h3>@(flagAdd ? "Add New Aircraft" : "Edit Aircraft")</h3>

<EditForm Model="@currentAircraft" OnValidSubmit=@HandleFormSubmit>
    <DataAnnotationsValidator />
    <div class="mb-3">
        <label for="model" class="form-label">Model</label>
        <InputText id="model" class="form-control" @bind-Value="currentAircraft.Model" />
    </div>
    <div class="mb-3">
        <label for="capacity" class="form-label">Capacity</label>
        <InputNumber id="capacity" class="form-control" @bind-Value="currentAircraft.Capacity" />
    </div>
    <div class="mb-3">
        <label for="performance" class="form-label">Performance</label>
        <InputNumber id="performance" class="form-control" @bind-Value="currentAircraft.Performance" />
    </div>
    <div class="mb-3">
        <label for="maxPassengers" class="form-label">Max Passengers</label>
        <InputNumber id="maxPassengers" class="form-control" @bind-Value="currentAircraft.MaxPassengers" />
    </div>
    <button type="submit" class="btn btn-success">Save</button>
    <button type="button" class="btn btn-secondary" @onclick="ClearForm">Cancel</button>
</EditForm>

@code {
    private List<AircraftFullDto> _aircrafts = new();
    private AircraftFullDto currentAircraft = new() {Model = "", Capacity = null, Performance = null, MaxPassengers = null };
    private string aircraftUrl = "api/Aircraft";
    private bool flagAdd = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadAircrafts();
    }

    private async Task LoadAircrafts()
    {
        try
        {
            _aircrafts = await Http.GetFromJsonAsync<List<AircraftFullDto>>(aircraftUrl) ?? new List<AircraftFullDto>();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading aircrafts: {ex.Message}", Severity.Error);
        }
    }

    private async Task AddNewAircraft()
    {
        try
        {
            var response = await Http.PostAsJsonAsync(aircraftUrl, currentAircraft);
            if (response.IsSuccessStatusCode)
            {
                ClearForm();
                await LoadAircrafts();
            }
            else
            {
                Snackbar.Add($"Failed to add aircraft: {response.StatusCode}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error adding aircraft: {ex.Message}", Severity.Error);
        }
    }

    private async Task DeleteAircraft(int aircraftId)
    {
        try
        {
            var response = await Http.DeleteAsync($"{aircraftUrl}/{aircraftId}");
            if (response.IsSuccessStatusCode)
            {
                await LoadAircrafts();
            }
            else
            {
                Snackbar.Add($"Failed to delete aircraft: {response.StatusCode}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error deleting aircraft: {ex.Message}", Severity.Error);
        }
    }

    private async Task UpdateAircraft()
    {
        try
        {
            var response = await Http.PutAsJsonAsync($"{aircraftUrl}/{currentAircraft.Id}", currentAircraft);
            if (response.IsSuccessStatusCode)
            {
                ClearForm();
                await LoadAircrafts();
            }
            else
            {
                Snackbar.Add($"Failed to update aircraft: {response.StatusCode}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error updating aircraft: {ex.Message}", Severity.Error);
        }
    }

    private async Task ShowUpdForm(int aircraftId)
    {
        flagAdd = false;
        var response = await Http.GetFromJsonAsync<AircraftFullDto>($"{aircraftUrl}/{aircraftId}");
        if (response != null)
        {
            currentAircraft = new AircraftFullDto
                {
                    Id = response.Id,
                    Model = response.Model,
                    Capacity = response.Capacity,
                    Performance = response.Performance,
                    MaxPassengers = response.MaxPassengers
                };
        }
    }

    private void ClearForm()
    {
        flagAdd = true;
        currentAircraft = new AircraftFullDto() {Id = 0, Model = "", Capacity = null, Performance = null, MaxPassengers = null };
    }

    private async Task HandleFormSubmit()
    {
        if (flagAdd)
        {
            await AddNewAircraft();
        }
        else
        {
            await UpdateAircraft();
        }
    }
}
